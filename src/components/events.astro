---
// EventGallery.astro
const eventImages = [

 {
    src: "/profiles/s200_aruna_varanasi._ph.d._.jpeg.jpg",
    alt: "",
    title: "",
    date: "",
    category: "Conference"
  },
   {
    src: "/profiles/shiva reddy main page.jpeg.jpg",
    alt: "",
    title: "",
    date: "",
    category: "Conference"
  },

  {
    src: "/pic/1.jpg",
    alt: "",
    title: "",
    date: "",
    category: "Conference"
  },
  {
    src: "/pic/2.jpg",
    // alt: "Cultural Festival Celebration",
    // title: "Cultural Fest",
    // date: "February 2024",
    category: "Conference"
  },
  {
    src: "/pic/3.jpg",
    // alt: "Innovation Showcase Event",
    // title: "Innovation Day",
    // date: "January 2024",
    category: "Conference"
  },
  {
    src: "/pic/4.jpg",
    // alt: "Sports Championship Finals",
    // title: "Sports Meet",
    // date: "December 2023",
    category: "Conference"
  },
  {
    src: "/pic/5.png",
    // alt: "Academic Excellence Awards",
    // title: "Awards Ceremony",
    // date: "November 2023",
    category: "Conference"
  }
];
---

<section class="gallery-section">
  <div class="background-pattern"></div>
  <div class="container">
    <div class="header-section">
      <div class="title-wrapper">
        <span class="subtitle">Capturing Moments</span>
        <h1 class="main-title">
          <span class="title-gradient">College Events</span>
        </h1>
        <p class="description">Discover the vibrant campus life through our most memorable events and celebrations</p>
      </div>
    </div>

    <div class="gallery-container">
      <div class="gallery-wrapper">
        {eventImages.map((image, index) => (
          <div class="gallery-card" data-index={index}>
            <div class="card-inner">
              <div class="image-container">
                <img src={image.src} alt={image.alt} loading="lazy" class="square-img"/>
                <div class="image-overlay">
                  <div class="overlay-content">
                    <span class="category-tag">{image.category}</span>
                    <h3 class="event-title">{image.title}</h3>
                    <p class="event-date">{image.date}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div class="navigation-controls">
        <button class="nav-btn prev-btn" aria-label="Previous events">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="nav-btn next-btn" aria-label="Next events">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="9,6 15,12 9,18"></polyline>
          </svg>
        </button>
      </div>

      <div class="progress-bar">
        <div class="progress-fill"></div>
      </div>

      <div class="dots-container">
        {eventImages.map((_, index) => (
          <button 
            class={`dot ${index === 0 ? 'active' : ''}`} 
            data-index={index}
            aria-label={`View event ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  * {
    box-sizing: border-box;
  }

  .gallery-section {
    position: relative;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2rem 0;
    overflow: hidden;
  }

  .background-pattern {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
      radial-gradient(circle at 25% 25%, rgba(255,255,255,0.1) 2px, transparent 2px),
      radial-gradient(circle at 75% 75%, rgba(255,255,255,0.1) 2px, transparent 2px);
    background-size: 60px 60px;
    animation: float 20s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-10px) rotate(2deg); }
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    position: relative;
    z-index: 2;
  }

  .header-section {
    text-align: center;
    margin-bottom: 2rem;
  }

  .title-wrapper {
    animation: slideInUp 1s ease-out;
  }

  .subtitle {
    display: inline-block;
    font-size: 1rem;
    font-weight: 500;
    color: rgba(255, 255, 255, 0.8);
    text-transform: uppercase;
    letter-spacing: 2px;
    margin-bottom: 1rem;
    position: relative;
  }

  .subtitle::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 2px;
    background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
    border-radius: 2px;
  }

  .main-title {
    font-size: clamp(2rem, 6vw, 4rem);
    font-weight: 800;
    margin: 1rem 0;
    line-height: 1.1;
  }

  .title-gradient {
    background: linear-gradient(135deg, #ffffff 0%, #e0e7ff 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 4px 20px rgba(0,0,0,0.3);
  }

  .description {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.9);
    max-width: 500px;
    margin: 0 auto;
    line-height: 1.5;
  }

  .gallery-container {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
  }

  .gallery-wrapper {
    display: flex;
    gap: 2rem;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    padding: 1rem 0;
  }

  .gallery-card {
    flex: 0 0 100%;
    position: relative;
  }

  @media (min-width: 768px) {
    .gallery-card {
      flex: 0 0 calc(50% - 1rem);
    }
  }

  @media (min-width: 1200px) {
    .gallery-card {
      flex: 0 0 calc(33.333% - 1.33rem);
    }
  }

  .card-inner {
    position: relative;
    height: 280px;
    border-radius: 24px;
    overflow: hidden;
    transform: translateY(0);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .card {
    background: linear-gradient(135deg, #5a6cff 0%, #a259e6 100%);
    color: #fff;
    border-radius: 20px;
    padding: 2.5rem 2rem;
    box-shadow: 0 4px 24px 0 rgba(44, 62, 80, 0.08);
    font-family: 'Inter', Arial, sans-serif;
  }

  .card h2, .card h1 {
    color: #fff;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .card ul {
    list-style: none;
    padding: 0;
    margin: 1.5rem 0 0 0;
  }

  .card li {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }

  .card li::before {
    content: "✔️";
    margin-right: 0.75em;
    font-size: 1.1em;
  }

  .card-inner:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
  }

  .image-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .card-inner:hover img {
    transform: scale(1.1);
  }

  .image-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    padding: 1.5rem;
    transform: translateY(100%);
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .card-inner:hover .image-overlay {
    transform: translateY(0);
  }

  .overlay-content {
    color: white;
  }

  .category-tag {
    display: inline-block;
    background: linear-gradient(135deg, #ff6b6b, #4ecdc4);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 0.5rem;
  }

  .event-title {
    font-size: 1.2rem;
    font-weight: 700;
    margin: 0.5rem 0;
    line-height: 1.3;
  }

  .event-date {
    font-size: 0.9rem;
    opacity: 0.9;
    margin: 0;
  }

  .navigation-controls {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    display: flex;
    justify-content: space-between;
    pointer-events: none;
    z-index: 10;
  }

  .nav-btn {
    width: 56px;
    height: 56px;
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    pointer-events: all;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .nav-btn svg {
    width: 24px;
    height: 24px;
    stroke-width: 2.5;
  }

  .nav-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  .prev-btn {
    margin-left: -28px;
  }

  .next-btn {
    margin-right: -28px;
  }

  .progress-bar {
    width: 100%;
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
    margin: 1.5rem 0;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
    border-radius: 2px;
    transition: width 0.6s ease;
    width: 20%;
  }

  .dots-container {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1rem;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.4);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .dot.active {
    background: white;
    transform: scale(1.2);
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
  }

  .dot::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 0;
    height: 0;
    background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .dot.active::before {
    width: 100%;
    height: 100%;
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(60px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .gallery-section {
      padding: 2rem 0;
    }

    .container {
      padding: 0 1rem;
    }

    .header-section {
      margin-bottom: 2rem;
    }

    .card-inner {
      height: 300px;
    }

    .navigation-controls {
      display: none;
    }

    .gallery-wrapper {
      gap: 1rem;
    }
  }

  .square-img {
    width: 200px;      /* or any size you want */
    height: 200px;
    object-fit: cover;
    border-radius: 12px; /* optional, for rounded corners */
    display: block;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    let currentSlide = 0;
    let slidesPerView = 1;
    let autoSlideInterval;
    let isTransitioning = false;
    
    const cards = document.querySelectorAll('.gallery-card');
    const dots = document.querySelectorAll('.dot');
    const wrapper = document.querySelector('.gallery-wrapper');
    const prevButton = document.querySelector('.prev-btn');
    const nextButton = document.querySelector('.next-btn');
    const progressFill = document.querySelector('.progress-fill');
    const galleryContainer = document.querySelector('.gallery-container');

    if (!cards.length || !wrapper) return;

    function updateSlidesPerView() {
      if (window.innerWidth >= 1200) {
        slidesPerView = 3;
      } else if (window.innerWidth >= 768) {
        slidesPerView = 2;
      } else {
        slidesPerView = 1;
      }
    }

    function updateSlider() {
      if (isTransitioning) return;
      
      const slideWidth = 100 / slidesPerView;
      const maxSlides = Math.max(0, cards.length - slidesPerView);
      currentSlide = Math.min(currentSlide, maxSlides);
      
      wrapper.style.transform = `translateX(-${currentSlide * slideWidth}%)`;
      
      // Update dots
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentSlide);
      });

      // Update progress bar
      const progress = ((currentSlide + 1) / (maxSlides + 1)) * 100;
      progressFill.style.width = `${progress}%`;

      // Add stagger animation to visible cards
      cards.forEach((card, index) => {
        const isVisible = index >= currentSlide && index < currentSlide + slidesPerView;
        if (isVisible) {
          setTimeout(() => {
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          }, (index - currentSlide) * 100);
        }
      });
    }

    function nextSlide() {
      if (isTransitioning) return;
      const maxSlides = Math.max(0, cards.length - slidesPerView);
      if (currentSlide < maxSlides) {
        currentSlide++;
      } else {
        currentSlide = 0;
      }
      updateSlider();
    }

    function prevSlide() {
      if (isTransitioning) return;
      const maxSlides = Math.max(0, cards.length - slidesPerView);
      if (currentSlide > 0) {
        currentSlide--;
      } else {
        currentSlide = maxSlides;
      }
      updateSlider();
    }

    function goToSlide(index) {
      if (isTransitioning) return;
      const maxSlides = Math.max(0, cards.length - slidesPerView);
      currentSlide = Math.min(index, maxSlides);
      updateSlider();
    }

    function startAutoSlide() {
      stopAutoSlide();
      autoSlideInterval = setInterval(nextSlide, 4000);
    }

    function stopAutoSlide() {
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
        autoSlideInterval = null;
      }
    }

    // Event listeners
    prevButton?.addEventListener('click', () => {
      prevSlide();
      stopAutoSlide();
      setTimeout(startAutoSlide, 8000);
    });

    nextButton?.addEventListener('click', () => {
      nextSlide();
      stopAutoSlide();
      setTimeout(startAutoSlide, 8000);
    });

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        goToSlide(index);
        stopAutoSlide();
        setTimeout(startAutoSlide, 8000);
      });
    });

    // Touch/swipe support
    let touchStartX = 0;
    let touchEndX = 0;
    let touchStartY = 0;
    let touchEndY = 0;

    wrapper.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
      touchStartY = e.changedTouches[0].screenY;
    }, { passive: true });

    wrapper.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      touchEndY = e.changedTouches[0].screenY;
      
      const deltaX = touchStartX - touchEndX;
      const deltaY = Math.abs(touchStartY - touchEndY);
      
      // Only trigger if horizontal swipe is more significant than vertical
      if (Math.abs(deltaX) > 50 && deltaY < 100) {
        if (deltaX > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
        stopAutoSlide();
        setTimeout(startAutoSlide, 8000);
      }
    }, { passive: true });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        stopAutoSlide();
        setTimeout(startAutoSlide, 8000);
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        stopAutoSlide();
        setTimeout(startAutoSlide, 8000);
      }
    });

    // Pause on hover
    galleryContainer?.addEventListener('mouseenter', stopAutoSlide);
    galleryContainer?.addEventListener('mouseleave', startAutoSlide);

    // Handle resize
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        updateSlidesPerView();
        updateSlider();
      }, 250);
    });

    // Intersection Observer for animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, observerOptions);

    cards.forEach(card => {
      card.style.opacity = '0';
      card.style.transform = 'translateY(20px)';
      card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(card);
    });

    // Initialize
    updateSlidesPerView();
    updateSlider();
    startAutoSlide();

    // Handle transition states
    wrapper.addEventListener('transitionstart', () => {
      isTransitioning = true;
    });

    wrapper.addEventListener('transitionend', () => {
      isTransitioning = false;
    });
  });
</script>